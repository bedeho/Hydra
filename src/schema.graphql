# ====
# The content in this file needs to be made automatically picking out right stuff from
# './generated/prisma-client/prisma-schema.ts'
# ====

scalar DateTime

input BalanceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  account: String
  account_not: String
  account_in: [String!]
  account_not_in: [String!]
  account_lt: String
  account_lte: String
  account_gt: String
  account_gte: String
  account_contains: String
  account_not_contains: String
  account_starts_with: String
  account_not_starts_with: String
  account_ends_with: String
  account_not_ends_with: String
  created: DateTime
  created_not: DateTime
  created_in: [DateTime!]
  created_not_in: [DateTime!]
  created_lt: DateTime
  created_lte: DateTime
  created_gt: DateTime
  created_gte: DateTime
  amount: Int
  amount_not: Int
  amount_in: [Int!]
  amount_not_in: [Int!]
  amount_lt: Int
  amount_lte: Int
  amount_gt: Int
  amount_gte: Int
  AND: [BalanceWhereInput!]
  OR: [BalanceWhereInput!]
  NOT: [BalanceWhereInput!]
}

enum BalanceOrderByInput {
  id_ASC
  id_DESC
  account_ASC
  account_DESC
  created_ASC
  created_DESC
  amount_ASC
  amount_DESC
}

type Balance {
  id: ID!
  account: String!
  created: DateTime!
  amount: Int!
}

type Query {
  balances(where: BalanceWhereInput, orderBy: BalanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Balance]!
}

#balances(where: BalanceWhereUniqueInput!): Balance
#balances(where: BalanceWhereInput, orderBy: BalanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Balance]!
#balancesConnection(where: BalanceWhereInput, orderBy: BalanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BalanceConnection!